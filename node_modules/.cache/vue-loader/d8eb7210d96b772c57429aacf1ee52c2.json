{"remainingRequest":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/heschwerdt/currentWork/vue-graph-visual/src/nodes/GraphNode.vue?vue&type=style&index=0&id=7ec862a9&scoped=true&lang=css&","dependencies":[{"path":"/home/heschwerdt/currentWork/vue-graph-visual/src/nodes/GraphNode.vue","mtime":1612438795808},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/usr/local/lib/node_modules/@vue/cli-service-global/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubm9kZSB7CiAgICBvcGFjaXR5OiAxOwogICAgLXdlYmtpdC1maWx0ZXI6IGRyb3Atc2hhZG93KCA1cHggNXB4IDRweCByZ2JhKDAsIDAsIDAsIC43KSk7CiAgICBmaWx0ZXI6IGRyb3Atc2hhZG93KCA1cHggNXB4IDRweCByZ2JhKDAsIDAsIDAsIC43KSk7Cn0KCi5ub2RlOmhvdmVyIHsKICAgIC13ZWJraXQtZmlsdGVyOiBkcm9wLXNoYWRvdyggN3B4IDdweCA1cHggcmdiYSgwLCAwLCAwLCAuNykpOwogICAgZmlsdGVyOiBkcm9wLXNoYWRvdyggN3B4IDdweCA1cHggcmdiYSgwLCAwLCAwLCAuNykpOwogICAgb3BhY2l0eTogMC43OwogICAgc3Ryb2tlOiBvcmFuZ2U7CiAgICBzdHJva2Utd2lkdGg6IDI7CiAgICAKfQo="},{"version":3,"sources":["GraphNode.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"GraphNode.vue","sourceRoot":"src/nodes","sourcesContent":["<template>\n    <g class=\"graph-comp\" :transform=\"'matrix('+scale+',0,0,'+scale+','+x+','+y+')'\" :width=\"width\" :height=\"height\" :draggable=\"true\">\n        <rect \n            :width=\"width\" \n            :height=\"height\" \n            :fill=\"color\" \n            :rx=\"borderRadius\" \n            :ry=\"borderRadius\" \n            @mousedown=\"handleDown\"\n            @mousemove=\"handleMove\" \n            @mouseup=\"handleRelease\" \n            @mouseleave=\"handleRelease\"\n            class=\"node\"\n            >\n                <text :transform=\"'matrix('+scale+',0,0,'+scale+','+x+','+y+')'\" :width=\"width\" :height=\"height\">{{ label }}</text>\n            </rect>\n    </g>\n</template>\n\n<script>\nexport default {\n    props: {\n        x: {\n            type: Number,\n            default: 0\n        },\n        y: {\n            type: Number,\n            default: 0\n        },\n        scale: {\n            type: Number,\n            default: 1\n        },\n        width: {\n            type: Number,\n            default: 50\n        },\n        height: {\n            type: Number,\n            default: 50\n        },\n        color: {\n            type: String,\n            default: '#accaff'\n        },\n        borderRadius: {\n            type: Number,\n            default: 0\n        },\n        label: {\n            type: String,\n            default: ''\n        },\n        svg: {\n            required: true\n        },\n    },\n    data: function() {\n        return {\n            isBeingDragged: false,\n            offset: undefined,\n            transform: undefined,\n        }\n    },\n    methods: {\n        handleDown(evt) {\n            if(evt && (evt.which == 2 || evt.button == 4 )){\n                this.$refs['node'].style.cursor = 'move'\n                this.isBeingDragged = true;\n\n                this.offset = this.getMousePosition(evt);\n                var transforms = this.$refs['node'].transform.baseVal;\n                if (transforms.length === 0 ||\n                    transforms.getItem(0).type !== SVGTransform.SVG_TRANSFORM_TRANSLATE) {\n                    var translate = this.svg.createSVGTransform()\n                    translate.setTranslate(0, 0);\n                    // Add the translation to the front of the transforms list\n                    this.$refs['node'].transform.baseVal.insertItemBefore(translate, 0);\n                }\n                \n\n                this.transform = transforms.getItem(0)\n                this.offset.x -= this.transform.matrix.e\n                this.offset.y -= this.transform.matrix.f\n            } else {\n                evt\n            }\n        },\n        handleMove(evt) {\n            if(this.isBeingDragged){\n                evt.preventDefault()\n                var coord = this.getMousePosition(evt);\n                this.transform.setTranslate(coord.x-this.offset.x,coord.y - this.offset.y)\n            }\n        },\n        handleRelease() {\n            this.isBeingDragged = false\n            this.$refs['node'].style.cursor = 'default'\n        },\n        getMousePosition(evt) {\n            var CTM = this.svg.getScreenCTM()\n            if(evt.touches) {evt = evt.touches[0]}\n            return {\n                x: (evt.clientX - CTM.e) / CTM.a,\n                y: (evt.clientY - CTM.f) / CTM.d\n            }\n        }\n    }\n}\n</script>\n\n<style scoped>\n.node {\n    opacity: 1;\n    -webkit-filter: drop-shadow( 5px 5px 4px rgba(0, 0, 0, .7));\n    filter: drop-shadow( 5px 5px 4px rgba(0, 0, 0, .7));\n}\n\n.node:hover {\n    -webkit-filter: drop-shadow( 7px 7px 5px rgba(0, 0, 0, .7));\n    filter: drop-shadow( 7px 7px 5px rgba(0, 0, 0, .7));\n    opacity: 0.7;\n    stroke: orange;\n    stroke-width: 2;\n    \n}\n</style>\n"]}]}